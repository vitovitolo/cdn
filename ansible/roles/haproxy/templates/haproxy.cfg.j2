global
	pidfile /var/run/haproxy.pid
	stats socket /var/run/haproxy.sock level admin
	log /dev/log   local0 info
	maxconn 64000
	user haproxy
	group haproxy
	daemon
	tune.ssl.default-dh-param 2048

defaults
	log     global
	mode    http
	option  tcplog
	option  dontlognull
	retries 3
	option  redispatch
	maxconn 10000
	timeout client 60s
	timeout server 60s
	timeout tunnel 1h
	timeout connect 5s
	timeout queue 5s
	timeout check 10s
	

listen public
	bind {{ haproxy_public_ip}}:80

	mode http
	option httplog
	option http-server-close

	#by default port 80 redirect to 443
	redirect scheme https

listen publicssl
	bind {{ haproxy_public_ip }}:443 ssl crt {{ haproxy_ssl_path }} ciphers ECDHE+aRSA+AES256+GCM+SHA384:ECDHE+aRSA+AES128+GCM+SHA256:ECDHE+aRSA+AES256+SHA384:ECDHE+aRSA+AES128+SHA256:ECDHE+aRSA+AES256+SHA:ECDHE+aRSA+AES128+SHA:AES256+GCM+SHA384:AES128+GCM+SHA256:AES128+SHA256:AES256+SHA256:DHE+aRSA+AES128+SHA:HIGH:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS:!RC4 no-sslv3

	mode http
	option forwardfor
	option httplog
	option http-server-close

	#send all request to cache first, if cache is down send to appservers	
	server cache {{ varnish_bind_ip }}:{{ varnish_bind_port }} check
	server appservers {{ haproxy_appservers_ip }}:{{ haproxy_appservers_port }} check backup

listen appservers
	bind {{ haproxy_appservers_ip }}:{{ haproxy_appservers_port }}
	mode http
	option httplog
	option forwardfor
	option http-server-close
	balance roundrobin
{% for backend in haproxy_appservers_backends %}  
	server {{ backend.name }} {{ backend.address }}:{{ backend.port }} check
{% endfor %}

##############
### STATS
################
listen stats 
	bind {{ haproxy_stats_ip }}:{{ haproxy_stats_port }}
	mode http
	stats enable
	stats uri /

